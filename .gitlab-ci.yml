# GitLab CI/CD Pipeline for LaCentrale Scraper
# Automated testing, building, and deployment

stages:
  - lint
  - test
  - build
  - security
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  POSTGRES_PASSWORD: "test_password"
  POSTGRES_DB: "lacentrale_test_db"
  POSTGRES_USER: "postgres"

# =============================================================================
# LINT STAGE - Code Quality Checks
# =============================================================================

lint:python:
  stage: lint
  image: python:3.11-slim
  before_script:
    - pip install black flake8 mypy
  script:
    - echo "üîç Running Python linting..."
    - black --check --diff .
    - flake8 . --max-line-length=120 --exclude=migrations,venv
    - mypy . --ignore-missing-imports
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint:docker:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - echo "üîç Running Dockerfile linting..."
    - hadolint Dockerfile
    - hadolint Dockerfile.jupyter
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# =============================================================================
# TEST STAGE - Unit and Integration Tests
# =============================================================================

test:unit:
  stage: test
  image: python:3.11-slim
  services:
    - name: postgres:15-alpine
      alias: postgres
      variables:
        POSTGRES_PASSWORD: $POSTGRES_PASSWORD
        POSTGRES_DB: $POSTGRES_DB
        POSTGRES_USER: $POSTGRES_USER
  variables:
    DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
  before_script:
    - apt-get update && apt-get install -y postgresql-client
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-mock
  script:
    - echo "üß™ Running unit tests..."
    - pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    - echo "‚úÖ Unit tests completed"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  coverage: '/TOTAL.*\s+(\d+%)$/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

test:integration:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker info
    - docker-compose --version
  script:
    - echo "üß™ Running integration tests..."
    - cp env.example .env
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d postgres
    - sleep 30  # Wait for PostgreSQL to be ready
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm test-runner
    - echo "‚úÖ Integration tests completed"
  after_script:
    - docker-compose -f docker-compose.yml -f docker-compose.test.yml down -v
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# =============================================================================
# BUILD STAGE - Docker Images
# =============================================================================

build:scraper:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üî® Building scraper image..."
    - docker build -t $CI_REGISTRY_IMAGE/scraper:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE/scraper:latest .
    - docker push $CI_REGISTRY_IMAGE/scraper:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/scraper:latest
    - echo "‚úÖ Scraper image built and pushed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

build:jupyter:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üî® Building Jupyter image..."
    - docker build -f Dockerfile.jupyter -t $CI_REGISTRY_IMAGE/jupyter:$CI_COMMIT_SHA .
    - docker build -f Dockerfile.jupyter -t $CI_REGISTRY_IMAGE/jupyter:latest .
    - docker push $CI_REGISTRY_IMAGE/jupyter:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/jupyter:latest
    - echo "‚úÖ Jupyter image built and pushed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# =============================================================================
# SECURITY STAGE - Security Scanning
# =============================================================================

security:container:
  stage: security
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üîí Running container security scan..."
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
      aquasec/trivy:latest image $CI_REGISTRY_IMAGE/scraper:latest
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

security:secrets:
  stage: security
  image: python:3.11-slim
  before_script:
    - pip install detect-secrets
  script:
    - echo "üîí Scanning for secrets..."
    - detect-secrets scan --all-files --baseline .secrets.baseline
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# =============================================================================
# DEPLOY STAGE - Deployment
# =============================================================================

deploy:staging:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  environment:
    name: staging
    url: http://staging.lacentrale-scraper.internal
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üöÄ Deploying to staging..."
    - echo "Using image: $CI_REGISTRY_IMAGE/scraper:$CI_COMMIT_SHA"
    # Add your staging deployment commands here
    # Example: kubectl, docker-compose, ansible, etc.
    - echo "‚úÖ Deployed to staging"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy:production:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  environment:
    name: production
    url: http://lacentrale-scraper.production
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "üöÄ Deploying to production..."
    - echo "Using image: $CI_REGISTRY_IMAGE/scraper:$CI_COMMIT_TAG"
    # Add your production deployment commands here
    - echo "‚úÖ Deployed to production"
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# =============================================================================
# CLEANUP - Resource Cleanup
# =============================================================================

cleanup:images:
  stage: .post
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "üßπ Cleaning up old Docker images..."
    - docker system prune -f
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

# =============================================================================
# SCHEDULED JOBS
# =============================================================================

dependency:update:
  stage: .pre
  image: python:3.11-slim
  before_script:
    - pip install pip-tools
  script:
    - echo "üîÑ Checking for dependency updates..."
    - pip-compile --upgrade requirements.in
  artifacts:
    paths:
      - requirements.txt
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

# =============================================================================
# NOTIFICATION (Optional)
# =============================================================================

notify:success:
  stage: .post
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "‚úÖ Pipeline completed successfully"
    # Add Slack/Teams/Email notification here if needed
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: on_success

notify:failure:
  stage: .post
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "‚ùå Pipeline failed"
    # Add failure notification here if needed
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: on_failure
